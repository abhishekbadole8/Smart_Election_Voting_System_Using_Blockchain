{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CandidateDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotRegisterInVotingPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughCandidates",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughVotes",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotUniqueID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RegistrationIsClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VotingIsClosed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "CandidateRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "VotingEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "VotingStarted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allVoters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "alreadyRegisteredCandidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "alreadyVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "candAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkCandidateAlreadyRegisteredOrNot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkVoterAlreadyVotedOrNot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkVoterIsValidOrNot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "declareResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_candidateId",
          "type": "uint256"
        }
      ],
      "name": "getCandidate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "candAddress",
              "type": "address"
            }
          ],
          "internalType": "struct VoteSession.Candidate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCandidates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "candAddress",
              "type": "address"
            }
          ],
          "internalType": "struct VoteSession.Candidate[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfCandidates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegistrationStatus",
      "outputs": [
        {
          "internalType": "enum VoteSession.RegistrationStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVotingStatus",
      "outputs": [
        {
          "internalType": "enum VoteSession.VotingStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinners",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "candAddress",
              "type": "address"
            }
          ],
          "internalType": "struct VoteSession.Candidate[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "indexToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfCandidates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfWinners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "registerCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrationStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrationStatus",
      "outputs": [
        {
          "internalType": "enum VoteSession.RegistrationStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrationStop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startNewElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_candidateId",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingStatus",
      "outputs": [
        {
          "internalType": "enum VoteSession.VotingStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingStop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "winners",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "candAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c520a48ef7fc776f63264b75da63ee4d7010451ce7e83b7e7d6fbddd7a2bbdd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2611546",
    "logsBloom": "0x
    "blockHash": "0x49f4952d8952c30f43429e28c57ca8b8bb6ebd5cf8aa4237e918f0f01ac0bcb4",
    "transactionHash": "0x3c520a48ef7fc776f63264b75da63ee4d7010451ce7e83b7e7d6fbddd7a2bbdd",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2611546",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b66033e42cf61a1bf443414204b6051d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CandidateDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRegisterInVotingPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughCandidates\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughVotes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotUniqueID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RegistrationIsClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VotingIsClosed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"CandidateRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"VotingEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"VotingStarted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVoters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"alreadyRegisteredCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"alreadyVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"candAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkCandidateAlreadyRegisteredOrNot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkVoterAlreadyVotedOrNot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkVoterIsValidOrNot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"declareResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_candidateId\",\"type\":\"uint256\"}],\"name\":\"getCandidate\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"candAddress\",\"type\":\"address\"}],\"internalType\":\"struct VoteSession.Candidate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCandidates\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"candAddress\",\"type\":\"address\"}],\"internalType\":\"struct VoteSession.Candidate[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfCandidates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistrationStatus\",\"outputs\":[{\"internalType\":\"enum VoteSession.RegistrationStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotingStatus\",\"outputs\":[{\"internalType\":\"enum VoteSession.VotingStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"candAddress\",\"type\":\"address\"}],\"internalType\":\"struct VoteSession.Candidate[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfCandidates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"registerCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationStatus\",\"outputs\":[{\"internalType\":\"enum VoteSession.RegistrationStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNewElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_candidateId\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingStatus\",\"outputs\":[{\"internalType\":\"enum VoteSession.VotingStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"candAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VoteSession.sol\":\"VoteSession\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/VoteSession.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract VoteSession {\\n    event CandidateRegistered(address _address, string _name, uint256 _id);\\n    event VotingStarted(uint256 _timestamp);\\n    event VotingEnded(uint256 _timestamp);\\n\\n    error NotOwner();\\n    error NotEnoughCandidates();\\n    error NotEnoughVotes();\\n    error AlreadyVoted();\\n    error CandidateDoesNotExist();\\n    error AlreadyRegistered();\\n    error RegistrationIsClosed();\\n    error VotingIsClosed();\\n    error CannotRegisterInVotingPeriod();\\n    error NotUniqueID();\\n\\n    struct Candidate {\\n        string name;\\n        uint256 id;\\n        uint256 voteCount;\\n        address candAddress;\\n    }\\n\\n    enum RegistrationStatus {\\n        OPEN,\\n        CLOSED\\n    }\\n\\n    enum VotingStatus {\\n        OPEN,\\n        CLOSED\\n    }\\n\\n    RegistrationStatus public registrationStatus;\\n    VotingStatus public votingStatus;\\n    mapping(uint256 => Candidate) public candidates;\\n    mapping(uint256 => uint256) public indexToId;\\n    mapping(address => bool) public alreadyVoted;\\n    mapping(address => bool) public alreadyRegisteredCandidate;\\n    mapping(address => bool) public voters;\\n    address[] public allVoters;\\n    Candidate[] public winners;\\n    uint256 public numberOfCandidates;\\n    uint256 public numberOfWinners;\\n    uint256 public totalVotes;\\n    address public owner;\\n\\n    constructor() {\\n        registrationStatus = RegistrationStatus.CLOSED;\\n        votingStatus = VotingStatus.CLOSED;\\n        owner = msg.sender;\\n    }\\n\\n    function startNewElection() public checkOwner {\\n        registrationStatus = RegistrationStatus.CLOSED;\\n        votingStatus = VotingStatus.CLOSED;\\n        for (uint256 i = 0; i <= numberOfCandidates; i++) {\\n            uint256 ID = indexToId[i];\\n            address candidateAddress = candidates[ID].candAddress;\\n            alreadyRegisteredCandidate[candidateAddress] = false;\\n            address tempAddress;\\n            candidates[ID] = Candidate({\\n                name: \\\"\\\",\\n                id: 0,\\n                voteCount: 0,\\n                candAddress: tempAddress\\n            });\\n            indexToId[i] = 0;\\n        }\\n        for (uint256 i = 0; i < allVoters.length; i++) {\\n            alreadyVoted[allVoters[i]] = false;\\n            voters[allVoters[i]] = false;\\n        }\\n        allVoters = new address[](0);\\n        for (uint256 i = 0; i < numberOfWinners; i++) {\\n            winners.pop();\\n        }\\n        numberOfCandidates = 0;\\n        totalVotes = 0;\\n        numberOfWinners = 0;\\n    }\\n\\n    function registerCandidate(\\n        uint256 _id,\\n        string memory _name\\n    ) public isCandidateRegistrationOpen {\\n        if (alreadyRegisteredCandidate[msg.sender]) {\\n            revert AlreadyRegistered();\\n        }\\n        if (candidates[_id].id > 0) {\\n            revert NotUniqueID();\\n        }\\n\\n        indexToId[numberOfCandidates] = _id;\\n        candidates[_id] = Candidate({\\n            name: _name,\\n            id: _id,\\n            voteCount: 0,\\n            candAddress: msg.sender\\n        });\\n        numberOfCandidates++;\\n        alreadyRegisteredCandidate[msg.sender] = true;\\n\\n        emit CandidateRegistered(msg.sender, _name, numberOfCandidates);\\n    }\\n\\n    function registerVoter() public {\\n        if (voters[msg.sender] == true) {\\n            revert AlreadyRegistered();\\n        }\\n\\n        voters[msg.sender] = true;\\n        allVoters.push(msg.sender);\\n    }\\n\\n    function registrationStart() public checkOwner {\\n        if (votingStatus == VotingStatus.OPEN) {\\n            revert CannotRegisterInVotingPeriod();\\n        }\\n        registrationStatus = RegistrationStatus.OPEN;\\n    }\\n\\n    function registrationStop() public checkOwner {\\n        registrationStatus = RegistrationStatus.CLOSED;\\n    }\\n\\n    function votingStart() public checkOwner {\\n        if (numberOfCandidates < 2) {\\n            revert NotEnoughCandidates();\\n        }\\n        if (registrationStatus == RegistrationStatus.OPEN) {\\n            registrationStop();\\n        }\\n        votingStatus = VotingStatus.OPEN;\\n    }\\n\\n    function votingStop() public checkOwner {\\n        registrationStatus = RegistrationStatus.CLOSED;\\n    }\\n\\n    function vote(uint256 _candidateId) public isVotingOpen {\\n        if (alreadyVoted[msg.sender]) {\\n            revert AlreadyVoted();\\n        }\\n\\n        alreadyVoted[msg.sender] = true;\\n        candidates[_candidateId].voteCount++;\\n        totalVotes++;\\n    }\\n\\n   \\n\\n    function declareResult() public checkOwner {\\n        if (numberOfCandidates < 2) {\\n            revert NotEnoughCandidates();\\n        }\\n        if (totalVotes < 1) {\\n            revert NotEnoughVotes();\\n        }\\n        uint256 mostVotes;\\n        for (uint256 i = 0; i < numberOfCandidates; i++) {\\n            uint256 id = indexToId[i];\\n            if (candidates[id].voteCount > mostVotes) {\\n                mostVotes = candidates[id].voteCount;\\n            }\\n        }\\n\\n        // if size of winners is greater than 1\\n        // then its a draw\\n        // Candidate[] memory winners = new Candidate[](numberOfCandidates);\\n        for (uint256 i = 0; i < numberOfCandidates; i++) {\\n            uint256 id = indexToId[i];\\n            if (candidates[id].voteCount == mostVotes) {\\n                // winners[i] = candidates[id];\\n                winners.push(candidates[id]);\\n                numberOfWinners++;\\n            }\\n        }\\n        registrationStatus = RegistrationStatus.CLOSED;\\n        votingStatus = VotingStatus.CLOSED;\\n    }\\n\\n    function getWinners() public view returns (Candidate[] memory) {\\n        return winners;\\n    }\\n\\n    function getCandidates() public view returns (Candidate[] memory) {\\n        Candidate[] memory allCandidates = new Candidate[](numberOfCandidates);\\n        for (uint256 i = 0; i < numberOfCandidates; i++) {\\n            uint256 id = indexToId[i];\\n            allCandidates[i] = candidates[id];\\n        }\\n        return (allCandidates);\\n    }\\n\\n    function getCandidate(\\n        uint256 _candidateId\\n    ) public view returns (Candidate memory) {\\n        return candidates[_candidateId];\\n    }\\n\\n    function getNumberOfCandidates() public view returns (uint256) {\\n        return numberOfCandidates;\\n    }\\n\\n\\n    function getTotalVotes() public view returns (uint256) {\\n        return totalVotes;\\n    }\\n\\n    function getRegistrationStatus() public view returns (RegistrationStatus) {\\n        return registrationStatus;\\n    }\\n\\n    function getVotingStatus() public view returns (VotingStatus) {\\n        return votingStatus;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return owner;\\n    }\\n\\n    function checkVoterIsValidOrNot() public view returns (bool) {\\n        return voters[msg.sender];\\n    }\\n\\n    function checkVoterAlreadyVotedOrNot() public view returns (bool) {\\n        return alreadyVoted[msg.sender];\\n    }\\n\\n    function checkCandidateAlreadyRegisteredOrNot() public view returns (bool) {\\n        return alreadyRegisteredCandidate[msg.sender];\\n    }\\n\\n    modifier isCandidateRegistrationOpen() {\\n        if (registrationStatus == RegistrationStatus.CLOSED) {\\n            revert RegistrationIsClosed();\\n        }\\n        _;\\n    }\\n\\n    modifier isVotingOpen() {\\n        if (votingStatus == VotingStatus.CLOSED) {\\n            revert VotingIsClosed();\\n        }\\n        _;\\n    }\\n\\n    modifier checkOwner() {\\n        if (msg.sender != owner) {\\n            revert NotOwner();\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xede4fd4ec142d21d4dd9648d1a0ecff0fb55fa2983bff16dddcc4f1ec21ecf49\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c8063893d20e81161011a578063a3ec138d116100ad578063d10093671161007c578063d100936714610552578063df15c37e1461056e578063e35fb2411461058c578063ecb617d9146105aa578063fbc10ed2146105b4576101fb565b8063a3ec138d146104dc578063ad839c371461050c578063b39788de1461052a578063b4062a3114610548576101fb565b806391fb85d6116100e957806391fb85d6146104635780639a0e7d661461046d5780639c84bb271461048b578063a2fb1175146104a9576101fb565b8063893d20e8146103d95780638acfaca9146103f75780638bbc9786146104155780638da5cb5b14610445576101fb565b80633477ee2e116101925780636f281613116101615780636f281613146103635780637a84d13e14610381578063856506741461039f5780638574c296146103cf576101fb565b80633477ee2e146102d857806335b8e8201461030b57806347f33fb51461033b578063581c281c14610345576101fb565b80630d15fd77116101ce5780630d15fd7714610288578063101158af146102a657806319f41a40146102b05780631a625ddc146102ce576101fb565b80630121b93f1461020057806306a49fce1461021c57806306d2ad401461023a578063085425441461026a575b600080fd5b61021a60048036038101906102159190612624565b6105e4565b005b6102246107c0565b6040516102319190612924565b60405180910390f35b610254600480360381019061024f91906125fb565b6109e1565b6040516102619190612946565b60405180910390f35b610272610a01565b60405161027f9190612961565b60405180910390f35b610290610a12565b60405161029d9190612a05565b60405180910390f35b6102ae610a18565b005b6102b8610bbd565b6040516102c5919061297c565b60405180910390f35b6102d6610bd0565b005b6102f260048036038101906102ed9190612624565b610ca9565b6040516103029493929190612997565b60405180910390f35b61032560048036038101906103209190612624565b610d81565b60405161033291906129e3565b60405180910390f35b610343610eaa565b005b61034d611486565b60405161035a919061297c565b60405180910390f35b61036b61149c565b6040516103789190612946565b60405180910390f35b6103896114f0565b6040516103969190612a05565b60405180910390f35b6103b960048036038101906103b49190612624565b6114fa565b6040516103c691906128cb565b60405180910390f35b6103d7611539565b005b6103e16118a1565b6040516103ee91906128cb565b60405180910390f35b6103ff6118cb565b60405161040c9190612a05565b60405180910390f35b61042f600480360381019061042a9190612624565b6118d1565b60405161043c9190612a05565b60405180910390f35b61044d6118e9565b60405161045a91906128cb565b60405180910390f35b61046b61190f565b005b6104756119e8565b6040516104829190612a05565b60405180910390f35b6104936119f2565b6040516104a09190612a05565b60405180910390f35b6104c360048036038101906104be9190612624565b6119f8565b6040516104d39493929190612997565b60405180910390f35b6104f660048036038101906104f191906125fb565b611ae0565b6040516105039190612946565b60405180910390f35b610514611b00565b6040516105219190612946565b60405180910390f35b610532611b54565b60405161053f9190612946565b60405180910390f35b610550611ba8565b005b61056c6004803603810190610567919061264d565b611d3b565b005b610576612058565b6040516105839190612924565b60405180910390f35b6105946121b3565b6040516105a19190612961565b60405180910390f35b6105b26121c9565b005b6105ce60048036038101906105c991906125fb565b612311565b6040516105db9190612946565b60405180910390f35b60018081111561061d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060019054906101000a900460ff166001811115610665577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561069d576040517f0b86625100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610721576040517f7c9a1cf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600082815260200190815260200160002060020160008154809291906107a090612c13565b9190505550600a60008154809291906107b890612c13565b919050555050565b6060600060085467ffffffffffffffff811115610806577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561083f57816020015b61082c612331565b8152602001906001900390816108245790505b50905060005b6008548110156109d9576000600260008381526020019081526020016000205490506001600082815260200190815260200160002060405180608001604052908160008201805461089590612bb0565b80601f01602080910402602001604051908101604052809291908181526020018280546108c190612bb0565b801561090e5780601f106108e35761010080835404028352916020019161090e565b820191906000526020600020905b8154815290600101906020018083116108f157829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508383815181106109ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052505080806109d190612c13565b915050610845565b508091505090565b60036020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900460ff1681565b600a5481565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a9f576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026008541015610adc576040517f1217258500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001811115610b16577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008054906101000a900460ff166001811115610b5c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610b6b57610b6a610bd0565b5b60008060016101000a81548160ff02191690836001811115610bb6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550565b600060019054906101000a900460ff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c57576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000806101000a81548160ff02191690836001811115610ca2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550565b6001602052806000526040600020600091509050806000018054610ccc90612bb0565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf890612bb0565b8015610d455780601f10610d1a57610100808354040283529160200191610d45565b820191906000526020600020905b815481529060010190602001808311610d2857829003601f168201915b5050505050908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b610d89612331565b60016000838152602001908152602001600020604051806080016040529081600082018054610db790612bb0565b80601f0160208091040260200160405190810160405280929190818152602001828054610de390612bb0565b8015610e305780601f10610e0557610100808354040283529160200191610e30565b820191906000526020600020905b815481529060010190602001808311610e1357829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f31576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000806101000a81548160ff02191690836001811115610f7c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055506001600060016101000a81548160ff02191690836001811115610fcd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060005b60085481116111905760006002600083815260200190815260200160002054905060006001600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000604051806080016040528060405180602001604052806000815250815260200160008152602001600081526020018273ffffffffffffffffffffffffffffffffffffffff1681525060016000858152602001908152602001600020600082015181600001908051906020019061110292919061236f565b50602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060006002600086815260200190815260200160002081905550505050808061118890612c13565b915050610fd5565b5060005b60068054905081101561132c57600060036000600684815481106111e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600560006006848154811061129d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061132490612c13565b915050611194565b50600067ffffffffffffffff81111561136e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561139c5781602001602082028036833780820191505090505b50600690805190602001906113b29291906123f5565b5060005b60095481101561146b5760078054806113f8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002090600402016000808201600061141d919061247f565b600182016000905560028201600090556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550509055808061146390612c13565b9150506113b6565b5060006008819055506000600a819055506000600981905550565b60008060019054906101000a900460ff16905090565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905090565b6000600854905090565b6006818154811061150a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115c0576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260085410156115fd576040517f1217258500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600a54101561163a576040517f0b7b8dc600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600090505b6008548110156116b057600060026000838152602001908152602001600020549050826001600083815260200190815260200160002060020154111561169c57600160008281526020019081526020016000206002015492505b5080806116a890612c13565b915050611642565b5060005b6008548110156117fc5760006002600083815260200190815260200160002054905082600160008381526020019081526020016000206002015414156117e8576007600160008381526020019081526020016000209080600181540180825580915050600190039060005260206000209060040201600090919091909150600082018160000190805461174690612bb0565b6117519291906124bf565b5060018201548160010155600282015481600201556003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050600960008154809291906117e290612c13565b91905055505b5080806117f490612c13565b9150506116b4565b5060016000806101000a81548160ff02191690836001811115611848577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055506001600060016101000a81548160ff02191690836001811115611899577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60095481565b60026020528060005260406000206000915090505481565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611996576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000806101000a81548160ff021916908360018111156119e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550565b6000600a54905090565b60085481565b60078181548110611a0857600080fd5b9060005260206000209060040201600091509050806000018054611a2b90612bb0565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5790612bb0565b8015611aa45780601f10611a7957610100808354040283529160200191611aa4565b820191906000526020600020905b815481529060010190602001808311611a8757829003601f168201915b5050505050908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b60056020528060005260406000206000915054906101000a900460ff1681565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905090565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c2f576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001811115611c69577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060019054906101000a900460ff166001811115611cb1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611ce9576040517f720e498600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060006101000a81548160ff02191690836001811115611d34577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550565b600180811115611d74577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008054906101000a900460ff166001811115611dba577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611df2576040517f35f83a4600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611e76576040517f3a81d6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060016000848152602001908152602001600020600101541115611ec7576040517fd1ee833b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600260006008548152602001908152602001600020819055506040518060800160405280828152602001838152602001600081526020013373ffffffffffffffffffffffffffffffffffffffff16815250600160008481526020019081526020016000206000820151816000019080519060200190611f4892919061236f565b50602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505060086000815480929190611fba90612c13565b91905055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f23443ba7280c5757fb27f451e8db3fd01ead30505d9c5de12cef4adb22b3a36c338260085460405161204c939291906128e6565b60405180910390a15050565b60606007805480602002602001604051908101604052809291908181526020016000905b828210156121aa57838290600052602060002090600402016040518060800160405290816000820180546120af90612bb0565b80601f01602080910402602001604051908101604052809291908181526020018280546120db90612bb0565b80156121285780601f106120fd57610100808354040283529160200191612128565b820191906000526020600020905b81548152906001019060200180831161210b57829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508152602001906001019061207c565b50505050905090565b60008060009054906101000a900460ff16905090565b60011515600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415612254576040517f3a81d6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506006339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60046020528060005260406000206000915054906101000a900460ff1681565b6040518060800160405280606081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b82805461237b90612bb0565b90600052602060002090601f01602090048101928261239d57600085556123e4565b82601f106123b657805160ff19168380011785556123e4565b828001600101855582156123e4579182015b828111156123e35782518255916020019190600101906123c8565b5b5090506123f1919061254c565b5090565b82805482825590600052602060002090810192821561246e579160200282015b8281111561246d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612415565b5b50905061247b919061254c565b5090565b50805461248b90612bb0565b6000825580601f1061249d57506124bc565b601f0160209004906000526020600020908101906124bb919061254c565b5b50565b8280546124cb90612bb0565b90600052602060002090601f0160209004810192826124ed576000855561253b565b82601f106124fe578054855561253b565b8280016001018555821561253b57600052602060002091601f016020900482015b8281111561253a57825482559160010191906001019061251f565b5b509050612548919061254c565b5090565b5b8082111561256557600081600090555060010161254d565b5090565b600061257c61257784612a45565b612a20565b90508281526020810184848401111561259457600080fd5b61259f848285612b6e565b509392505050565b6000813590506125b681612d51565b92915050565b600082601f8301126125cd57600080fd5b81356125dd848260208601612569565b91505092915050565b6000813590506125f581612d68565b92915050565b60006020828403121561260d57600080fd5b600061261b848285016125a7565b91505092915050565b60006020828403121561263657600080fd5b6000612644848285016125e6565b91505092915050565b6000806040838503121561266057600080fd5b600061266e858286016125e6565b925050602083013567ffffffffffffffff81111561268b57600080fd5b612697858286016125bc565b9150509250929050565b60006126ad83836127e7565b905092915050565b6126be81612adc565b82525050565b6126cd81612adc565b82525050565b60006126de82612a86565b6126e88185612aa9565b9350836020820285016126fa85612a76565b8060005b85811015612736578484038952815161271785826126a1565b945061272283612a9c565b925060208a019950506001810190506126fe565b50829750879550505050505092915050565b61275181612aee565b82525050565b61276081612b4a565b82525050565b61276f81612b5c565b82525050565b600061278082612a91565b61278a8185612aba565b935061279a818560208601612b7d565b6127a381612d18565b840191505092915050565b60006127b982612a91565b6127c38185612acb565b93506127d3818560208601612b7d565b6127dc81612d18565b840191505092915050565b600060808301600083015184820360008601526128048282612775565b915050602083015161281960208601826128ad565b50604083015161282c60408601826128ad565b50606083015161283f60608601826126b5565b508091505092915050565b600060808301600083015184820360008601526128678282612775565b915050602083015161287c60208601826128ad565b50604083015161288f60408601826128ad565b5060608301516128a260608601826126b5565b508091505092915050565b6128b681612b40565b82525050565b6128c581612b40565b82525050565b60006020820190506128e060008301846126c4565b92915050565b60006060820190506128fb60008301866126c4565b818103602083015261290d81856127ae565b905061291c60408301846128bc565b949350505050565b6000602082019050818103600083015261293e81846126d3565b905092915050565b600060208201905061295b6000830184612748565b92915050565b60006020820190506129766000830184612757565b92915050565b60006020820190506129916000830184612766565b92915050565b600060808201905081810360008301526129b181876127ae565b90506129c060208301866128bc565b6129cd60408301856128bc565b6129da60608301846126c4565b95945050505050565b600060208201905081810360008301526129fd818461284a565b905092915050565b6000602082019050612a1a60008301846128bc565b92915050565b6000612a2a612a3b565b9050612a368282612be2565b919050565b6000604051905090565b600067ffffffffffffffff821115612a6057612a5f612ce9565b5b612a6982612d18565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612ae782612b20565b9050919050565b60008115159050919050565b6000819050612b0882612d29565b919050565b6000819050612b1b82612d3d565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612b5582612afa565b9050919050565b6000612b6782612b0d565b9050919050565b82818337600083830152505050565b60005b83811015612b9b578082015181840152602081019050612b80565b83811115612baa576000848401525b50505050565b60006002820490506001821680612bc857607f821691505b60208210811415612bdc57612bdb612cba565b5b50919050565b612beb82612d18565b810181811067ffffffffffffffff82111715612c0a57612c09612ce9565b5b80604052505050565b6000612c1e82612b40565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c5157612c50612c5c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60028110612d3a57612d39612c8b565b5b50565b60028110612d4e57612d4d612c8b565b5b50565b612d5a81612adc565b8114612d6557600080fd5b50565b612d7181612b40565b8114612d7c57600080fd5b5056fea2646970667358221220fd3e5f5f493e9e6b79f01b40f1c808f954ce9d49126e1e7babe7c5b632ebcd8b64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 55,
        "contract": "contracts/VoteSession.sol:VoteSession",
        "label": "registrationStatus",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(RegistrationStatus)49"
      },
      {
        "astId": 58,
        "contract": "contracts/VoteSession.sol:VoteSession",
        "label": "votingStatus",
        "offset": 1,
        "slot": "0",
        "type": "t_enum(VotingStatus)52"
      },
      {
        "astId": 63,
        "contract": "contracts/VoteSession.sol:VoteSession",
        "label": "candidates",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Candidate)46_storage)"
      },
      {
        "astId": 67,
        "contract": "contracts/VoteSession.sol:VoteSession",
        "label": "indexToId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/VoteSession.sol:VoteSession",
        "label": "alreadyVoted",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 75,
        "contract": "contracts/VoteSession.sol:VoteSession",
        "label": "alreadyRegisteredCandidate",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 79,
        "contract": "contracts/VoteSession.sol:VoteSession",
        "label": "voters",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 82,
        "contract": "contracts/VoteSession.sol:VoteSession",
        "label": "allVoters",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 86,
        "contract": "contracts/VoteSession.sol:VoteSession",
        "label": "winners",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(Candidate)46_storage)dyn_storage"
      },
      {
        "astId": 88,
        "contract": "contracts/VoteSession.sol:VoteSession",
        "label": "numberOfCandidates",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 90,
        "contract": "contracts/VoteSession.sol:VoteSession",
        "label": "numberOfWinners",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 92,
        "contract": "contracts/VoteSession.sol:VoteSession",
        "label": "totalVotes",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 94,
        "contract": "contracts/VoteSession.sol:VoteSession",
        "label": "owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Candidate)46_storage)dyn_storage": {
        "base": "t_struct(Candidate)46_storage",
        "encoding": "dynamic_array",
        "label": "struct VoteSession.Candidate[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(RegistrationStatus)49": {
        "encoding": "inplace",
        "label": "enum VoteSession.RegistrationStatus",
        "numberOfBytes": "1"
      },
      "t_enum(VotingStatus)52": {
        "encoding": "inplace",
        "label": "enum VoteSession.VotingStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Candidate)46_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VoteSession.Candidate)",
        "numberOfBytes": "32",
        "value": "t_struct(Candidate)46_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Candidate)46_storage": {
        "encoding": "inplace",
        "label": "struct VoteSession.Candidate",
        "members": [
          {
            "astId": 39,
            "contract": "contracts/VoteSession.sol:VoteSession",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 41,
            "contract": "contracts/VoteSession.sol:VoteSession",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 43,
            "contract": "contracts/VoteSession.sol:VoteSession",
            "label": "voteCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 45,
            "contract": "contracts/VoteSession.sol:VoteSession",
            "label": "candAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}